description "start and stop <%= @title %> in docker"

<% if @running %>
start on filesystem and started docker
stop on runlevel [!2345]
<% else %>
manual
<% end %>

respawn
#respawn limit 5 20

pre-start script
  # Wait for docker to finish starting up first.
  FILE="/var/run/docker.sock"
  while [ ! -e "$FILE" ] ; do
    inotifywait -t 2 -e create $(dirname $FILE)
  done
  # Since we name our docker the same as the service so we can terminate it properly, 
  # it needs to be removed before we can continue, if "|| true" is for when it doesn't
  # exist already.
  /usr/bin/docker rm <%= @name %> ||  true
end script

script
  
  /usr/bin/docker run -i -u '<%= @username %>' -h '<%= @hostname %>'<% if @dns %><% @dns_array.each do |address| %> -dns <%= address %><% end %><% end %><% if @env %><% @env_array.each do |env| %> -e <%= env %><% end %><% end %><% if @ports %><% @ports_array.each do |port| %> -p <%= port %><% end %><% end %><% if @volumes %><% @volumes_array.each do |volume| %> -v <%= volume %><% end %><% end %><% if @volumes_from %> -volumes-from <%= @volumes_from %><% end %> -m <%= @memory_limit %> <% if @links %><%= @links_array.map {|link| "-link #{link}" }.join(' ') %> <% end %><% if @use_name %>-name <%= @name %><% end %> <%= @image %><% if @imagetag %>:<%= @imagetag %><% end %> <% if @command %><%= @command %><% end %>
end script

post-stop script
  /usr/bin/docker stop <%= @name %>
end script
